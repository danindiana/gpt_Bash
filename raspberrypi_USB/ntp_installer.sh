#!/bin/bash

# NTP Installer Script for Debian/Raspberry Pi
# Detects system info and installs optimal NTP solution

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}Please run as root/sudo${NC}"
    exit 1
fi

# System Detection
echo -e "${YELLOW}=== System Information ===${NC}"
DISTRO=$(lsb_release -is)
RELEASE=$(lsb_release -rs)
ARCH=$(uname -m)
HARDWARE=$(cat /proc/device-tree/model 2>/dev/null || echo "Generic PC")

echo -e "Distro: ${GREEN}$DISTRO${NC}"
echo -e "Release: ${GREEN}$RELEASE${NC}"
echo -e "Arch: ${GREEN}$ARCH${NC}"
echo -e "Hardware: ${GREEN}$HARDWARE${NC}"

# Check existing NTP services
function check_ntp_services() {
    echo -e "${YELLOW}\n=== Checking Existing NTP Services ===${NC}"
    
    # Check chrony
    if systemctl is-active --quiet chrony; then
        echo -e "chrony: ${GREEN}Active${NC}"
    else
        echo -e "chrony: ${RED}Inactive${NC}"
    fi
    
    # Check ntpd
    if systemctl is-active --quiet ntp; then
        echo -e "ntpd: ${GREEN}Active${NC}"
    else
        echo -e "ntpd: ${RED}Inactive${NC}"
    fi
    
    # Check systemd-timesyncd
    if systemctl is-active --quiet systemd-timesyncd; then
        echo -e "systemd-timesyncd: ${GREEN}Active${NC}"
    else
        echo -e "systemd-timesyncd: ${RED}Inactive${NC}"
    fi
}

check_ntp_services

# Determine best NTP solution
if [[ "$DISTRO" == "Debian" && $(echo "$RELEASE >= 10" | bc -l) -eq 1 ]] || 
   [[ "$DISTRO" == "Ubuntu" && $(echo "$RELEASE >= 18.04" | bc -l) -eq 1 ]]; then
    NTP_CHOICE="chrony"
else
    NTP_CHOICE="ntp"
fi

# Raspberry Pi specific recommendation
if [[ "$HARDWARE" == *"Raspberry Pi"* ]]; then
    NTP_CHOICE="chrony"
fi

echo -e "${YELLOW}\nRecommended NTP implementation: ${GREEN}$NTP_CHOICE${NC}"

# Installation function
function install_ntp() {
    echo -e "${YELLOW}\n=== Installing $1 ===${NC}"
    
    case $1 in
        "chrony")
            apt update
            apt install -y chrony
            systemctl stop systemd-timesyncd 2>/dev/null
            systemctl disable systemd-timesyncd 2>/dev/null
            systemctl enable --now chrony
            ;;
        "ntp")
            apt update
            apt install -y ntp
            systemctl stop systemd-timesyncd 2>/dev/null
            systemctl disable systemd-timesyncd 2>/dev/null
            systemctl enable --now ntp
            ;;
    esac
    
    # Configure basic settings
    if [ "$1" == "chrony" ]; then
        echo -e "${YELLOW}\nConfiguring chrony...${NC}"
        cp /etc/chrony/chrony.conf /etc/chrony/chrony.conf.bak
        cat > /etc/chrony/chrony.conf <<EOL
# Generated by NTP installer script
pool pool.ntp.org iburst
pool 0.$DISTRO.pool.ntp.org iburst
driftfile /var/lib/chrony/chrony.drift
makestep 1.0 3
rtcsync
hwtimestamp *
EOL
        
        # Raspberry Pi specific
        if [[ "$HARDWARE" == *"Raspberry Pi"* ]]; then
            echo "keyfile /etc/chrony/chrony.keys" >> /etc/chrony/chrony.conf
        fi
        
        systemctl restart chrony
    fi
    
    echo -e "${GREEN}\n$1 installation complete!${NC}"
}

# Prompt user
read -p "Do you want to install $NTP_CHOICE? [Y/n] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]] || [[ -z $REPLY ]]; then
    install_ntp "$NTP_CHOICE"
    check_ntp_services
    
    # Verify sync
    echo -e "${YELLOW}\n=== Verification ===${NC}"
    if [ "$NTP_CHOICE" == "chrony" ]; then
        chronyc tracking
        chronyc sources
    else
        ntpq -p
    fi
else
    echo -e "${RED}Installation aborted.${NC}"
fi

echo -e "${YELLOW}\n=== Script Complete ===${NC}"
